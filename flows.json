[
    {
        "id": "d5528b8de8a910a1",
        "type": "tab",
        "label": "init",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "444f738553fde936",
        "type": "tab",
        "label": "ui_button",
        "disabled": false,
        "info": ""
    },
    {
        "id": "42d314d19c437ae8",
        "type": "tab",
        "label": "ui_sensors",
        "disabled": false,
        "info": ""
    },
    {
        "id": "28be11aa5dda6f24",
        "type": "tab",
        "label": "setting",
        "disabled": false,
        "info": ""
    },
    {
        "id": "753dd38e63bfaf0a",
        "type": "tab",
        "label": "lumi",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "9b93b44814325e7b",
        "type": "mqtt-broker",
        "name": "localhost",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e205326b6e3f36ed",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "7471c7e5ac36c878",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "612a6fd2731d802f",
        "type": "ui_tab",
        "name": "Voley",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5465515af2945d6f",
        "type": "ui_tab",
        "name": "Battery",
        "icon": "fa-battery-full",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f29bd05dbb9d8419",
        "type": "ui_tab",
        "name": "Setting",
        "icon": "settings",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e7f7ff66.2de07",
        "type": "ui_tab",
        "name": "Restore",
        "icon": "dashboard"
    },
    {
        "id": "75723747f5460f63",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "9f213c40125a5160",
        "type": "ui_group",
        "name": "Toilette",
        "tab": "7471c7e5ac36c878",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c3860422bbb7d03c",
        "type": "ui_group",
        "name": "Cusine",
        "tab": "612a6fd2731d802f",
        "order": 1,
        "disp": true,
        "width": "4",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d66224eb2e38880f",
        "type": "ui_group",
        "name": "Cusine",
        "tab": "7471c7e5ac36c878",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4289f43d63cf25ed",
        "type": "ui_group",
        "name": "Button",
        "tab": "5465515af2945d6f",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e1a180a18950c296",
        "type": "ui_group",
        "name": "zigbee2mqtt",
        "tab": "f29bd05dbb9d8419",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1e93855ef249264e",
        "type": "ui_group",
        "name": "Вентилятор душ",
        "tab": "f29bd05dbb9d8419",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "19178fb22b463673",
        "type": "ui_group",
        "name": "Установка температуры",
        "tab": "f29bd05dbb9d8419",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5f1964dfcf4fae41",
        "type": "ui_group",
        "name": "Датчик двери вход",
        "tab": "f29bd05dbb9d8419",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "24f5ca9dc0e4bc7b",
        "type": "ui_group",
        "name": "Движение коридор 2 эт.",
        "tab": "f29bd05dbb9d8419",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d9f50c9fcd0d9442",
        "type": "ui_group",
        "name": "Ночной режим",
        "tab": "f29bd05dbb9d8419",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4291671c8c148a47",
        "type": "ui_group",
        "name": "proba",
        "tab": "7471c7e5ac36c878",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "251ed399a086688a",
        "type": "ui_group",
        "name": "Setting",
        "tab": "f29bd05dbb9d8419",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "64936940ec0d5b8c",
        "type": "inject",
        "z": "d5528b8de8a910a1",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 95,
        "y": 110,
        "wires": [
            [
                "e6808e552de6a4f4"
            ]
        ]
    },
    {
        "id": "efc37fd53257fe77",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "init setting",
        "func": "var lib = global.get('LIB');\nvar bat_cl = [];\nconst prefix = global.get(\"setup_prefix\");\nconst dimmers = global.get(\"setup_Dimmer\");\nconst sensors = global.get(\"setup_Sensor\");\nconst contact = global.get(\"setup_Contact\");\nconst motion = global.get(\"setup_Motion\");\nconst clapan = global.get(\"setup_Clapan\");\nvar tp; var gp; var l;\nif (dimmers){\nfor (let i = 1; i < dimmers+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;} // если номер устройства меньше 10 то дописываем вперед 0)\n    tp = prefix+\"setup/Dimmer\"+l+\"/night_brightness\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Dimmer\"+l+\"/night_brightness_l1\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Dimmer\"+l+\"/night_brightness_l2\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"Dimmer\"+l+\"/brightness\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"Dimmer\"+l+\"/brightness_l1\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"Dimmer\"+l+\"/brightness_l2\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n}}\nif (sensors){\nfor (let i = 1; i < sensors+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;} // если номер устройства меньше 10 то дописываем вперед 0\n    tp = prefix+\"setup/Sensor\"+l+\"/temp\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Sensor\"+l+\"/fan_auto\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Sensor\"+l+\"/fan_hum\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n}}\nif (contact){\nfor (let i = 1; i < contact+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;} // если номер устройства меньше 10 то дописываем вперед 0\n    tp = prefix+\"setup/Contact\"+l+\"/auto\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Contact\"+l+\"/sec\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n}}\nif (contact){\nfor (let i = 1; i < contact+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;} // если номер устройства меньше 10 то дописываем вперед 0\n    tp = prefix+\"setup/Motion\"+l+\"/auto\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"setup/Motion\"+l+\"/sec\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n}}\nif (clapan){\nfor (let i = 1; i < clapan+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;} // если номер устройства меньше 10 то дописываем вперед 0\n    tp = prefix+\"Clapan\"+l+\"/local_temperature\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n    tp = prefix+\"Clapan\"+l+\"/current_heating_setpoint\"; gp = global.get(lib.ConvName(tp), \"file\");\n    if (gp && gp!=\"\") {node.send({topic:tp, payload:gp});}\n}}\n\n\nbat_cl[1] = \"z2m/setup/night_mode\";\nbat_cl[2] = \"z2m/setup/night_mode_auto\";\nbat_cl[3] = \"z2m/setup/night_mode_on_h\";\nbat_cl[4] = \"z2m/setup/night_mode_on_m\";\nbat_cl[5] = \"z2m/setup/night_mode_off_h\";\nbat_cl[6] = \"z2m/setup/night_mode_off_m\";\nfor (let i = 1; i < 7; i++) {\n    node.send({topic:bat_cl[i], payload:global.get(lib.ConvName(bat_cl[i]), \"file\")});\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 150,
        "wires": [
            [
                "50eabe8d3b401b6c"
            ]
        ]
    },
    {
        "id": "50eabe8d3b401b6c",
        "type": "mqtt out",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 555,
        "y": 110,
        "wires": []
    },
    {
        "id": "df81a8ba3195896e",
        "type": "inject",
        "z": "d5528b8de8a910a1",
        "name": "OnNewMinute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "1",
        "payload": "OnNewMinute",
        "payloadType": "str",
        "x": 125,
        "y": 190,
        "wires": [
            [
                "b999e0df1fc405dd",
                "896a9fedfb15c35b"
            ]
        ]
    },
    {
        "id": "b999e0df1fc405dd",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "termostat",
        "func": "cb = 5; // количество термостатов\nvar lib = global.get('LIB'); // подключаем функции\nlet bat_cl = []; let bat_c = []; let pl; \nlet bat_clt = []; let nmsg = []; let  ns = [];\n// реле управляемые клапанами отопления или теплым полом\n// (NO нормально открытый, NC - нормально закрытый/ теплый пол)\n// установки етмпературы должны быть в переменной setup_ИмяДатчика_temp\nbat_cl[1] = \"Relay02\";  bat_c[1] = 2; bat_clt[1] = \"NC\"; ns[1] = \"Sensor01\";\nbat_cl[2] = \"Dimmer10\"; bat_c[2] = 2; bat_clt[2] = \"NO\"; ns[2] = \"Sensor02\";\nbat_cl[3] = \"Relay01\";  bat_c[3] = 1; bat_clt[3] = \"NO\"; ns[3] = \"Sensor04\";\nbat_cl[4] = \"Relay01\";  bat_c[4] = 2; bat_clt[4] = \"NO\"; ns[4] = \"Sensor05\";\nbat_cl[5] = \"Relay03\";  bat_c[5] = 1; bat_clt[5] = \"NO\"; ns[5] = \"Sensor06\";\n\n\n\nfor (let i = 1; i < cb+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;}\n    if(!bat_clt[i]){bat_clt[i]=\"NO\"}\n    if(!ns[i]){ns[i]=\"Sensor\"+l}\n    temp_sensor = global.get(ns[i]+\"_temperature\", \"file\");\n    temp_set = global.get(\"setup_\"+ns[i]+\"_temp\", \"file\");\n    \n    if (temp_sensor > temp_set) {\n        if (bat_clt[i] == \"NO\") {\n            pl = \"ON\";\n        }else{\n            pl = \"OFF\";\n        }\n    } else {\n        if (bat_clt[i] == \"NO\") {\n            pl = \"OFF\";\n        }else{\n            pl = \"ON\";\n        } \n    }\n lib.Relay(bat_cl[i],bat_c[i],pl);\n\n}\n\nreturn;\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 190,
        "wires": []
    },
    {
        "id": "896a9fedfb15c35b",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "fanauto",
        "func": "cb = 2; // количество вентиляторов\nlet bat_cl = []; let pl = []; let bat_clt = []; let nmsg = [];\nbat_cl[1] = \"z2m/Relay03/set/state_l2\"; bat_clt[1] = \"Sensor06\";\nbat_cl[2] = \"z2m/Relay02/set/state_l1\"; bat_clt[2] = \"Sensor01\";\n\nfor (let i = 1; i < cb+1; i++) {\n    hum_sensor = global.get(bat_clt[i]+\"_humidity\");\n    hum_set = global.get(\"setup_\"+bat_clt[i]+\"_fan_hum\");\n    hum_on = global.get(\"setup_\"+bat_clt[i]+\"_fan_auto\");\n    if (hum_on == \"ON\") {\n        if (hum_sensor > hum_set) {\n            pl = \"ON\";\n        } else {\n            pl = \"OFF\";\n        }\n        node.send({payload: pl, topic: bat_cl[i]});\n    }\n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 230,
        "wires": [
            [
                "50eabe8d3b401b6c"
            ]
        ]
    },
    {
        "id": "e6808e552de6a4f4",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "init lib",
        "func": "var lib = {};\n\nlib.test = (name, pos) => {\n    if (pos == undefined) {node.warn(\"undefined\")}\n    \n}\n\n// функция для организации задержки sleep, пример использования await sleep(5000);\nfunction sleep(time) {\n    return new Promise((resolve) => setTimeout(resolve, time));\n}\n\n// функция управления рольставнями\n    lib.Curtain = (F_name, pos) => { \n        var nmsg={};\n        if (isNaN(pos)) {\n            if (global.get(F_name+\"_moving\") == \"STOP\") {\n                nmsg.payload = pos; \n                global.set (F_name+\"_state_old\", pos);\n            } \n            else \n            {\n                if (pos == \"OPEN\") { if (global.get(F_name+\"_moving\") == \"UP\") {nmsg.payload = \"STOP\";} else {nmsg.payload = pos;}}\n                if (pos == \"CLOSE\") { if (global.get(F_name+\"_moving\") == \"DOWN\") {nmsg.payload = \"STOP\";} else {nmsg.payload = pos;}} \n                if (pos == \"STOP\") {nmsg.payload = \"STOP\";}\n            }\n            nmsg.topic = global.get(\"setup_prefix\")+F_name+\"/set/state\"            \n        } else {\n            nmsg.payload = Math.abs(pos);\n            nmsg.topic = global.get(\"setup_prefix\")+F_name+\"/set/position\";\n        }\n        node.send(nmsg);\n    }\n// функция управления рольставнями одной кнопкой\n    lib.CurtainB = (F_name) => { \n        var nmsg={};\n        var position = global.get(F_name+\"_position\");\n        node.warn (\"OK\");\n        if (global.get(F_name+\"_moving\") == \"STOP\") \n            if (position == 0) {\n                    nmsg.payload = \"OPEN\"; \n                    global.set (F_name+\"_state_old\", \"OPEN\");\n                } else if (position > 98) {\n                    nmsg.payload = \"CLOSE\";  \n                    global.set (F_name+\"_state_old\", \"CLOSE\");\n                } else {\n                    if (global.get (F_name+\"_state_old\") == \"OPEN\") {\n                        nmsg.payload = \"CLOSE\";  \n                        global.set (F_name+\"_state_old\", \"CLOSE\");\n                    } else {\n                        nmsg.payload = \"OPEN\";  \n                        global.set (F_name+\"_state_old\", \"OPEN\");\n                    }\n                }\n            else \n            {\n                nmsg.payload = \"STOP\";\n            }\n        nmsg.topic = global.get(\"setup_prefix\")+F_name+\"/set/state\"\n        node.send(nmsg);\n    }\n// функция управления диммером/реле режим \"переключения\" с ночным режимом\n    lib.Dimmer = (F_name, pos, state, proc) => {\n        var nmsg = {}; var nmsg2 = {}; var status; var status_b; var mn;\n        if (proc) {mn=2.54} else {mn=1}\n        if (pos == undefined || pos == \"\") { pos=\"\"} else {if(!isNaN(pos)) {pos = \"_l\"+pos} else {pos = \"_\"+pos}}\n        if (state == undefined) {\n            if (global.get(F_name+\"_state\"+pos)) {status = global.get(F_name+\"_state\"+pos);} else {status = global.get(F_name+\"_state\"+pos, \"file\");}  // статус вкл/выкл\n        } else {\n            if (state==\"OFF\" || state==false) {status = \"ON\"} else {status = \"OFF\"}\n        }\n        if (global.get(F_name+\"_brightness\"+pos))   {status_b = global.get(F_name+\"_brightness\"+pos);} else {status_b = global.get(F_name+\"_brightness\"+pos, \"file\");} // текущая яркость\n        var status_a = global.get(\"setup_\"+F_name+\"_night_auto\"+pos, \"file\"); // включен ли ночной режим\n        var status_n = global.get(\"setup_\"+F_name+\"_night_brightness\"+pos, \"file\"); // яркость в ночном режиме\n        var status_d = global.get(\"setup_\"+F_name+\"_day_brightness\"+pos, \"file\");  // яркость в дневном режиме\n        var night = global.get(\"setup_night_mode\"); // включен ли ночной режим\n        // сохранение значений яркости в дневном режиме\n        if (night!=\"ON\" || status_a!=\"ON\") {\n            global.set(\"setup_\"+F_name+\"_day_brightness\"+pos, status_b, \"file\");\n            status_d = global.get(\"setup_\"+F_name+\"_day_brightness\"+pos, \"file\");\n        }\n        // включение выключение в зависимости от режима\n        if (status==\"ON\") { // \n            nmsg.payload =\"OFF\";\n            nmsg.topic = \"z2m/\"+F_name+\"/set/state\"+pos;\n        } else {\n            if (night==\"ON\" && status_a==\"ON\") {\n                nmsg.payload =\"ON\";\n                nmsg.topic = \"z2m/\"+F_name+\"/set/state\"+pos;\n                if(!isNaN(state) && state!=true && state!=false) {nmsg2.payload = Math.round(state*mn);} else {nmsg2.payload = Math.round(status_n);}\n                nmsg2.payload = status_n;\n                nmsg2.topic = \"z2m/\"+F_name+\"/set/brightness\"+pos;\n                node.send(nmsg2)\n\t        } else {\n                nmsg.payload =\"ON\";\n                nmsg.topic = \"z2m/\"+F_name+\"/set/state\"+pos;\n                if(!isNaN(state) && state!=true && state!=false) {nmsg2.payload = Math.round(state*mn);} else {nmsg2.payload = status_d;}\n                nmsg2.topic = \"z2m/\"+F_name+\"/set/brightness\"+pos;\n                node.send(nmsg2);\n            }\n        }\n        node.send(nmsg);\n    } \n// функция управления диммером режим \"диммирование\"     \n    lib.DimmerB = (F_name, pos, brightness) => {\n        var nmsg={};\n        if (!pos || pos == \"\") { pos = \"\";} else {pos = \"_l\"+pos;}\n        if (!brightness) { brightness = 254;}       \n        nmsg.payload = brightness;\n        nmsg.topic = global.get(\"setup_prefix\")+F_name+\"/set/brightness\"+pos;\n        node.send(nmsg);\n    }\n// функция управления реле tuya    \n    lib.RelayTuya = (F_name, pos, state) => {\n        var nmsg = {}; var status; var stat;\n        if (!pos || pos == \"\") { pos = 1;}\n        if (global.get(F_name+\"_\"+pos)) \n                {status = global.get(F_name+\"_\"+pos);} \n            else \n                {status = global.get(F_name+\"_\"+pos, \"file\");}  // статус вкл/выкл\n            nmsg.topic = \"tuya/\"+F_name;\n        if (state == undefined || state == \"TOGGLE\") {\n            if (status==\"true\") {status = false} else {status = true}\n            stat = status;\n        } else {\n            if (state==\"ON\" || state==true) {status = true} else {status = false}\n            stat = status;\n        }\n        nmsg.payload = '{\"set\": '+stat+', \"dps\" : '+pos+'}'\n        node.send(nmsg);\n    }\n\n\n// функция управления диммером/реле/led режим \"переключения\" без ночного режима\n    lib.Relay = (F_name, pos, state) => {\n        var nmsg = {}; var status;\n        if (!pos || pos == \"\") { pos = \"\";} else {\n            if(!isNaN(pos)) {pos = \"_l\"+pos;} else {pos = \"_\"+pos;}\n        }            \n            if (global.get(F_name+\"_state\"+pos)) \n                {status = global.get(F_name+\"_state\"+pos);} \n            else \n                {status = global.get(F_name+\"_state\"+pos, \"file\");}  // статус вкл/выкл\n            nmsg.topic = global.get(\"setup_prefix\")+F_name+\"/set/state\"+pos;\n        if (state==undefined) {\n            if (status==\"ON\") {status = \"OFF\"} else {status = \"ON\"}\n            nmsg.payload = status;\n        } else {\n            if (state==true || state==\"ON\") {state=\"ON\"} else {state=\"OFF\"}\n            nmsg.payload = state;\n        }\n        node.send(nmsg);\n    }\n// другие функции\n// функция получения имени устройства из топика\n    lib.Clear = (str) => {\n        var topic = str;\n        topic = topic.replace (global.get(\"setup_prefix\"),\"\"); // удаляем корневой путь\n        topic = topic.substring(0,topic.search('/'));\n        return topic;\n    }\n// функция преобразования топика в переменную\n    lib.ConvName = (str) => {\n        var topic = str;\n        topic = topic.replace (global.get(\"setup_prefix\"),\"\"); // удаляем корневой путь\n        topic = topic.split(\"/\").join(\"_\"); // заменяем все косые на подчеркивание\n        topic = topic.split(\"/\").join(\"_\"); // заменяем все косые на подчеркивание\n        topic = topic.split(\"/\").join(\"_\"); // заменяем все косые на подчеркивание\n        topic = topic.split(\" \").join(\"_\"); // заменяем все косые на подчеркивание\n        topic = topic.split(\" \").join(\"_\"); // заменяем все косые на подчеркивание\n        return topic;\n    }\n// функция уровня батареи\n    lib.Battery = (proc) => {\n        var sym; var topic; var col;\n    switch (true) {\n        case proc >= 90 && proc <= 100:\n            sym = \"fa-battery-full\"; col = \"green\";\n            break;\n        case proc >= 75 && proc < 90:\n            sym = \"fa-battery-three-quarters\"; col = \"green\";\n            break;\n        case proc >= 50 && proc < 75:\n            sym = \"fa-battery-half\"; col = \"yellow\";\n            break;\n        case proc >= 25 && proc < 50:\n            sym = \"fa-battery-quarter\"; col = \"orange\";\n            break;\n        case proc >= 0 && proc < 25:\n            sym = \"fa-battery-empty\"; col = \"red\";\n            break;\n        default:\n            sym = \"fa-battery-empty\"; col = \"gray\";\n            break;\n    }\n        topic = '<font color = \"'+col+'\" i class=\"fa '+sym+' fa-2x \"></font>'\n        return topic;\n    }\n\n\n\n\n\n\n\nglobal.set('LIB',lib)",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 295,
        "y": 110,
        "wires": [
            [
                "50eabe8d3b401b6c"
            ]
        ]
    },
    {
        "id": "21240ecb680403ad",
        "type": "inject",
        "z": "d5528b8de8a910a1",
        "name": "start2",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "x": 95,
        "y": 150,
        "wires": [
            [
                "efc37fd53257fe77"
            ]
        ]
    },
    {
        "id": "9a976a011afac503",
        "type": "mqtt in",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "z2m/+/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 95,
        "y": 430,
        "wires": [
            [
                "e9f875bac16921cb"
            ]
        ]
    },
    {
        "id": "cd0255a66a175377",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "Button",
        "func": "var bt = msg.payload; // получаем событие\nvar lib = global.get('LIB'); // подключаем функции\nvar name = lib.Clear(msg.topic); // получаем имя устройства через функцию очистки топика\n\nif (name == \"Button01\" && bt == \"single_left\")     {lib.Dimmer(\"Dimmer11\", 1)}\nif (name == \"Button01\" && bt == \"single_right\")    {lib.Dimmer(\"Dimmer01\", 2)}\nif (name == \"Button02\" && bt == \"single_left\")     {lib.Relay(\"Dimmer02\", 1)}\nif (name == \"Button02\" && bt == \"single_right\")    {lib.Relay(\"Dimmer02\", 2)}\nif (name == \"Button02\" && bt == \"double_left\")     {lib.Curtain(\"Curtain01\",\"OPEN\")}\nif (name == \"Button02\" && bt == \"double_right\")    {lib.Curtain(\"Curtain01\",\"CLOSE\")}\nif (name == \"Button03\" && bt == \"single_left\")     {lib.Relay(\"Dimmer01\", 2)}\nif (name == \"Button03\" && bt == \"single_right\")    {lib.Relay(\"Dimmer01\", 1)}\n\nif (name == \"Contact01\")    {lib.Relay(\"Dimmer01\", 1, bt)}\n\n\n\nreturn;\n\n\n\n\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 535,
        "wires": []
    },
    {
        "id": "2e62a5c48e6b9ee7",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "ON",
        "func": "var bt = msg.payload; var topic = msg.topic; var lib = global.get('LIB')\ntopic = lib.Clear(topic);\nmsg.payload = \"ON\";\nmsg.reset;\nif (global.get(\"setup_\"+topic+\"_auto\")==\"ON\"){\nreturn msg;\n} else {\nreturn;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 535,
        "wires": [
            [
                "f6fcafe9117cdd2d",
                "cd0255a66a175377"
            ]
        ]
    },
    {
        "id": "05651d31b5e96eac",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "OFF",
        "func": "var bt = msg.payload; var topic = msg.topic; var lib = global.get('LIB')\ntopic = lib.Clear(topic);\nmsg.payload = \"OFF\";\nmsg.delay = parseInt(global.get(\"setup_\"+topic+\"_sec\"))*1000;\nif (global.get(\"setup_\"+topic+\"_auto\")==\"ON\"){\nreturn msg;\n} else {\nreturn;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 565,
        "wires": [
            [
                "f6fcafe9117cdd2d"
            ]
        ]
    },
    {
        "id": "f6fcafe9117cdd2d",
        "type": "trigger",
        "z": "d5528b8de8a910a1",
        "name": "delay",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "payl",
        "duration": "250",
        "extend": true,
        "overrideDelay": true,
        "units": "ms",
        "reset": "ON",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 620,
        "y": 565,
        "wires": [
            [
                "cd0255a66a175377"
            ]
        ]
    },
    {
        "id": "68ce4092f34a1fee",
        "type": "switch",
        "z": "d5528b8de8a910a1",
        "name": "door",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 255,
        "y": 510,
        "wires": [
            [
                "2e62a5c48e6b9ee7"
            ],
            [
                "05651d31b5e96eac"
            ]
        ]
    },
    {
        "id": "3069ed3986f72913",
        "type": "mqtt in",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "z2m/+/contact",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 95,
        "y": 510,
        "wires": [
            [
                "68ce4092f34a1fee"
            ]
        ]
    },
    {
        "id": "700acfcc0bbd6714",
        "type": "mqtt in",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "z2m/+/occupancy",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 105,
        "y": 590,
        "wires": [
            [
                "8ab3397bfe25145b"
            ]
        ]
    },
    {
        "id": "8ab3397bfe25145b",
        "type": "switch",
        "z": "d5528b8de8a910a1",
        "name": "motion",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "true",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 255,
        "y": 590,
        "wires": [
            [
                "2e62a5c48e6b9ee7"
            ],
            [
                "05651d31b5e96eac"
            ]
        ]
    },
    {
        "id": "e9f875bac16921cb",
        "type": "delay",
        "z": "d5528b8de8a910a1",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 325,
        "y": 430,
        "wires": [
            [
                "cd0255a66a175377"
            ]
        ]
    },
    {
        "id": "162a8adf513f6f71",
        "type": "comment",
        "z": "d5528b8de8a910a1",
        "name": "получение событий с выключателей",
        "info": "",
        "x": 175,
        "y": 400,
        "wires": []
    },
    {
        "id": "ee61d202d1c6cf82",
        "type": "comment",
        "z": "d5528b8de8a910a1",
        "name": "получение событий с датчиков открытия дверей/окон",
        "info": "",
        "x": 225,
        "y": 480,
        "wires": []
    },
    {
        "id": "747bd510ad416bbc",
        "type": "comment",
        "z": "d5528b8de8a910a1",
        "name": "получение событий с датчиков движения",
        "info": "",
        "x": 185,
        "y": 560,
        "wires": []
    },
    {
        "id": "c5f66dbd369d6e71",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "TuyaToMqtt",
        "func": "lib = global.get('LIB'); // подключаем функции\ntopic = msg.data.name\ntopic = lib.ConvName(topic)\nstatus1 = msg.payload.dps[1]\nstatus2 = msg.payload.dps[2]\ntry {\n  if (status1 == true || status1 == false) {\n    msg.payload = status1\n    msg.topic = topic+\"_1\"\n    node.send (msg)\n  }\n} catch (err) {\n  // обработка ошибки\n}\ntry {\n  if (status2 == true || status2 == false) {\n    msg.payload = status2\n    msg.topic = topic+\"_2\"\n    node.send (msg)\n  }\n} catch (err) {\n  // обработка ошибки\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 805,
        "y": 45,
        "wires": [
            [
                "daa28326a49655c9"
            ]
        ]
    },
    {
        "id": "daa28326a49655c9",
        "type": "mqtt out",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 965,
        "y": 45,
        "wires": []
    },
    {
        "id": "53ea1b692aac9a37",
        "type": "comment",
        "z": "d5528b8de8a910a1",
        "name": "init lib manual",
        "info": "**lib.Clear(\"топик\")**\nфункция получает имя устройства, удаляет из mqtt топика префикс, который задается в первой строке ноды Прикрепленное изображение и отбрасывает всё что после имени устройства начиная с косой черты.\nтопик \"z2m/Button01/action\" будет преобразован в \"Button01\"\n\n**lib.ConvName(\"топик\")**\nфункция преобразует топик в имя переменной, удаляет в начале префикс и заменяет все косые черты на подчеркивание.\nтопик \"z2m/Sensor01/temperature\" будет преобразован в Sensor01_temperature. Используется для формирования переменных.\n\n**lib.Curtain(\"Имя устройства\", pos)**\nфункция управления рольставнями или шторами.\nИмя устройства - имя устройства рольставни или шторы.\npos - команда, может быть числом или одной из следующих строк: \"UP\", \"DOWN\", \"STOP\"\nесли pos число то рольставням посылается команда установки позиции pos и формируется топик вида префикс+Имя устройства+\"/set/position\"\nесли одна из перечисленных строк тогда:\nесли рольставни имеют статус \"STOP\" то посылается команда pos\nесли рольставни имеют статус = команде pos то посылается команда \"STOP\"\nесли рольставни имеют статус противоположный команде pos то выполняется команда pos\nпубликуется в топик: Префикс+Имя устройства+\"/set/state\"\n\n**lib.CurtainB(\"Имя устройства\")**\nфункция управления рольставнями или шторами с помощью одной кнопки\nИмя устройства - имя устройства рольставни или шторы.\nесли рольставни имеют статус \"STOP\" и рольставни имеют позицию закрыто то посылается команда открыть, если позицию открыто то посылается команда закрыть, если промежуточную позицию то посылается команда противоположная той что была ранее послана через эту функцию перед остановкой.\nесли рольставни имеют статус не \"STOP\" то посылается команда \"STOP\"\nпубликуется в топик: Префикс+Имя устройства+\"/set/state\"\n\n**lib.Dimmer (\"Имя устройства\", pos, state, proc)**\nфункция управление диммером\nИмя устройства - имя устройства диммер.\npos - (не обязательный параметр) число - номер канала (1,2,3 ...), строка - имя канала (\"left\", \"right\")\nесли pos число то будет формироваться строка Префикс+Имя устройства+\"state_l\"+pos\nесли pos нет или \"\" то будет формироваться строка Префикс+Имя устройства+\"state\" (для одноканальных диммеров или led контроллеров)\nstate - (не обязательный параметр) статус, строка (\"ON\",\"OFF\",\"TOGGLE\", true, false или число от 1 до 255)\nесли нет то выполняется \"TOGGLE\", при чем если включен ночной режим (переменная setup_\"+Имя устройства+\"_night_auto\"+pos равна \"ON\") и статус был \"OFF\" то примет значения яркости ночного режима который установлен в файловой переменной: \"setup\"+Имя устройства+\"_night_brightness\"+pos (от 1 до 100). для устройства c именем \"Dimmer02\" второй канал переменная для ночного режима этого диммера будет \"setup_Dimmer02_night_brightness2\"\nесли state число то устанавливается яркость на заданное число\nproc - используется если state число, если есть параметр proc любое значение то state дано в процентах от 1 до 100 которое для управления диммером умножается на 2,54 и округляется\n\n**lib.DimmerB (\"Имя устройства\", pos, state)**\nфункция управления диммером режим диммирование\nИмя устройства - имя устройства диммер.\npos - (не обязательный параметр) число - номер канала (1,2,3 ...), строка - имя канала (\"left\", \"right\")\nесли pos число то будет формироваться строка Префикс+Имя устройства+\"state_l\"+pos\nесли pos нет или \"\" то будет формироваться строка Префикс+Имя устройства+\"state\" (для одноканальных диммеров или led контроллеров)\nstate - число, уровень яркости, если не указан, то 254\n\n**lib.Relay (\"Имя устройства\", pos, state)**\nфункция управления реле.\nИмя устройства - имя устройства диммер.\npos - (не обязательный параметр) число - номер канала (1,2,3 ...), строка - имя канала (\"left\", \"right\")\nесли pos число то будет формироваться строка Префикс+Имя устройства+\"state_l\"+pos\nstate - (не обязательный параметр) статус, строка (\"ON\",\"OFF\",\"TOGGLE\") если не указан то \"TOGGLE\"\n\n**lib.Battery (уровень заряда батареи)**\nформирует html строку с Font Awesome символом батареи и окрашиванием в разные цвета в зависимости от уровня заряда батареи. \n\n** await sleep(миллисекунды) **\nзадержка в миллисекундах",
        "x": 420,
        "y": 90,
        "wires": []
    },
    {
        "id": "f684f3df9d2d1c2c",
        "type": "comment",
        "z": "d5528b8de8a910a1",
        "name": "v.1.3",
        "info": "v1.3\n- оптимизирован код\n- отдельная функция сохранения данных о батареи\n\nv1.2\n- добавлено в функцию Dimmer установку яркости диммера\n\nv1.1\n- во все функции где возможно параметры \"ON\" или \"OFF\" можно вместо ON и OFF передавать true или false соответственно\n- в ноду termostat добавлено указание датчиков темературы\nv1.0\nhttps://youtu.be/SIi30xbhhH8",
        "x": 60,
        "y": 20,
        "wires": []
    },
    {
        "id": "0e4610f438e6e130",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "data",
        "func": "// задаем начальные переменные\nconst prefix = \"z2m/\"; // префикс zigbee2mqtt\nconst dimmers = 11; // количество диммеров Dimmer01, Dimmer02 ..\nconst sensors = 0; // количество датчиков температуры Sensor01, Sensor02 ..\nconst contact = 1; // количество датчиков открытия двери/окон Contact01, Contact02 ..\nconst motion = 0; // количество датчиков движения Motion01, Motion02\nconst button = 11; //количество выключателей Button01, Button02 ..\nconst clapan = 5; // количество клапанов отопления\n// ---------------------------------\n\n\nglobal.set(\"setup_prefix\", prefix);\nglobal.set(\"setup_Dimmer\", dimmers);\nglobal.set(\"setup_Sensor\", sensors);\nglobal.set(\"setup_Contact\", contact);\nglobal.set(\"setup_Motion\", motion);\nglobal.set(\"setup_Button\", button);\nglobal.set(\"setup_Clapan\", clapan);",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 295,
        "y": 70,
        "wires": []
    },
    {
        "id": "17d6b28bd9eedacf",
        "type": "inject",
        "z": "d5528b8de8a910a1",
        "name": "start",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "x": 95,
        "y": 70,
        "wires": [
            [
                "0e4610f438e6e130",
                "0aea1e0bb7683bb4"
            ]
        ]
    },
    {
        "id": "5a4c06dd7a9d1fff",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "mqtt battary",
        "func": "lib = global.get('LIB'); bt = msg.payload; topic = msg.topic;\nnp = lib.ConvName(topic); // удаляем из топика лишнее и заменяем косую черту на подчеркивание\n\n// получаем дату и время\nvar today = new Date();\ndd1 = today.getDate();\ndd2 = today.getMonth();\ndd3 = today.getHours();\ndd4 = today.getMinutes();\nif (dd1<10){dd1=\"0\"+dd1;}\nif (dd2<10){dd2=\"0\"+dd2;}\nif (dd3<10){dd3=\"0\"+dd3;}\nif (dd4<10){dd4=\"0\"+dd4;}\nvar nowdate = dd2+\".\"+dd1;\nglobal.set(np+\"date\", nowdate);\nglobal.set(np+\"_date\", today);\n// записываем значение в переменную\nglobal.set(np, bt);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 305,
        "y": 350,
        "wires": []
    },
    {
        "id": "f5921250b633f656",
        "type": "mqtt in",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "z2m/+/battery",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 95,
        "y": 350,
        "wires": [
            [
                "5a4c06dd7a9d1fff"
            ]
        ]
    },
    {
        "id": "e8c7a23e8b1a7b65",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "mqtt в переменные file",
        "func": "lib = global.get('LIB'); bt = msg.payload; topic = msg.topic;\nnp = lib.ConvName(topic); // удаляем из топика лишнее и заменяем косую черту на подчеркивание\n\n// записываем значение в переменную\nglobal.set(np, bt, \"file\");\nglobal.set(np, bt);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 355,
        "y": 270,
        "wires": []
    },
    {
        "id": "3a8de093f0266834",
        "type": "mqtt in",
        "z": "d5528b8de8a910a1",
        "name": "",
        "topic": "z2m/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 75,
        "y": 305,
        "wires": [
            [
                "7308ca9dbbb95049"
            ]
        ]
    },
    {
        "id": "7308ca9dbbb95049",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "mqtt в переменные",
        "func": "lib = global.get('LIB') \nbt = msg.payload; \ntopic = msg.topic;\nnmsg={};\nflagok=1;\n// удаляем из топика лишнее и заменяем косую черту на подчеркивание\nnp = lib.ConvName(topic); \n// исключаем из переменных устаройства\nif(np.includes(\"bridge\")) {flagok=0;}\nif(!np.includes(\"_\")) {flagok=0;}\nif(np.includes(\"Tuya\")) {flagok=1;}\n\n// переменные которые надо хранить в файле\ncontext = \"default\";\nif (np.indexOf(\"_current_heating_setpoint\") > -1 ) {context = \"file\";}\nif (np.indexOf(\"_local_temperature\") > -1 ) {context = \"file\";}\nif (np.indexOf(\"_state\") > -1 ) {context = \"file\";}\nif (np.indexOf(\"_brightness\") > -1 ) {context = \"file\";}\nif (np.indexOf(\"temperature\") > -1 && np.indexOf(\"Sensor\") > -1 ) {context = \"file\";}\nif (np.indexOf(\"humidity\") > -1    && np.indexOf(\"Sensor\") > -1 ) {context = \"file\";}\n\n// записываем значение в переменную\nif(flagok) {global.set(np, bt, context);}\nif(flagok) {global.set(np, bt);}\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 345,
        "y": 305,
        "wires": []
    },
    {
        "id": "0aea1e0bb7683bb4",
        "type": "function",
        "z": "d5528b8de8a910a1",
        "name": "data",
        "func": "// задаем начальные переменные\nvar setup = {};\nsetup.prefix = \"z2m/\"; // префикс zigbee2mqtt\nsetup.dimmers = 11; // количество диммеров Dimmer01, Dimmer02 ..\nsetup.sensors = 0; // количество датчиков температуры Sensor01, Sensor02 ..\nsetup.contact = 1; // количество датчиков открытия двери/окон Contact01, Contact02 ..\nsetup.motion = 0; // количество датчиков движения Motion01, Motion02\nsetup.button = 11; //количество выключателей Button01, Button02 ..\nsetup.clapan = 5; // количество клапанов отопления\n// ---------------------------------\n\n\nglobal.set(\"setup\", setup);\n",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 30,
        "wires": []
    },
    {
        "id": "2480be690f30e097",
        "type": "ui_switch",
        "z": "444f738553fde936",
        "name": "",
        "label": "douсhe",
        "tooltip": "",
        "group": "9f213c40125a5160",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Dimmer01_1",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 340,
        "y": 40,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "6b5e1b070046a2a8",
        "type": "function",
        "z": "444f738553fde936",
        "name": "function",
        "func": "bt = msg.payload; \nlib = global.get('LIB') // подключаем функции\ntopic = lib.Clear(msg.topic); // используем функцию Clear для очистки топика\n\nif (topic == \"Dimmer01_1\")      {lib.Dimmer(\"Dimmer01\", 1, bt)}\nif (topic == \"Dimmer01_2\")      {lib.Dimmer(\"Dimmer01\", 2, bt)}\nif (topic == \"Dimmer02_1\")      {lib.Dimmer(\"Dimmer02\", 1, bt)}\nif (topic == \"Dimmer02_2\")      {lib.Dimmer(\"Dimmer02\", 2, bt)}\n\nif (topic == \"Dimmer01_b1\")      {lib.Dimmer(\"Dimmer01\", 1, bt)}\nif (topic == \"Dimmer01_b2\")      {lib.Dimmer(\"Dimmer01\", 2, bt)}\nif (topic == \"Dimmer02_b1\")      {lib.Dimmer(\"Dimmer02\", 1, bt)}\nif (topic == \"Dimmer02_b2\")      {lib.Dimmer(\"Dimmer02\", 2, bt)}\n\n\nreturn;",
        "outputs": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 725,
        "y": 110,
        "wires": []
    },
    {
        "id": "ae0d30344cb7293d",
        "type": "ui_switch",
        "z": "444f738553fde936",
        "name": "",
        "label": "toilette",
        "tooltip": "",
        "group": "9f213c40125a5160",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Dimmer01_2",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 330,
        "y": 70,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "3b74788019f8415a",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer01/state_l1",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 40,
        "wires": [
            [
                "2480be690f30e097"
            ]
        ]
    },
    {
        "id": "844b36120b215ff8",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer01/state_l2",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 70,
        "wires": [
            [
                "ae0d30344cb7293d"
            ]
        ]
    },
    {
        "id": "e12446eb9b0a7fcf",
        "type": "ui_slider",
        "z": "444f738553fde936",
        "name": "Dimmer01_b1",
        "label": "",
        "tooltip": "",
        "group": "9f213c40125a5160",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "Dimmer01_b1",
        "topicType": "str",
        "min": 0,
        "max": "255",
        "step": 1,
        "className": "",
        "x": 360,
        "y": 230,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "09bf8684b4485250",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer01/brightness_l1",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 230,
        "wires": [
            [
                "e12446eb9b0a7fcf"
            ]
        ]
    },
    {
        "id": "b9d4d6300d3ffcf1",
        "type": "ui_slider",
        "z": "444f738553fde936",
        "name": "Dimmer01_b2",
        "label": "",
        "tooltip": "",
        "group": "9f213c40125a5160",
        "order": 6,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "Dimmer01_b2",
        "topicType": "str",
        "min": 0,
        "max": "255",
        "step": 1,
        "className": "",
        "x": 360,
        "y": 260,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "3380db23bf54d498",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer01/brightness_l2",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "b9d4d6300d3ffcf1"
            ]
        ]
    },
    {
        "id": "570c33c64f9170aa",
        "type": "ui_switch",
        "z": "444f738553fde936",
        "name": "centre",
        "label": "centre",
        "tooltip": "",
        "group": "d66224eb2e38880f",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "decouple": "true",
        "topic": "Dimmer02_1",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 330,
        "y": 100,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "c399a8be211db09a",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer02/state_l1",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 100,
        "wires": [
            [
                "570c33c64f9170aa"
            ]
        ]
    },
    {
        "id": "c2b13f693cf29835",
        "type": "ui_slider",
        "z": "444f738553fde936",
        "name": "Dimmer02_b1",
        "label": "",
        "tooltip": "",
        "group": "d66224eb2e38880f",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "Dimmer02_b1",
        "topicType": "str",
        "min": 0,
        "max": "255",
        "step": 1,
        "className": "",
        "x": 360,
        "y": 290,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "78b6d435e41e8cca",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer02/brightness_l1",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 290,
        "wires": [
            [
                "c2b13f693cf29835"
            ]
        ]
    },
    {
        "id": "01903a16fd3bcd0b",
        "type": "ui_slider",
        "z": "444f738553fde936",
        "name": "Dimmer02_b2",
        "label": "",
        "tooltip": "",
        "group": "d66224eb2e38880f",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "outs": "end",
        "topic": "Dimmer02_b2",
        "topicType": "str",
        "min": 0,
        "max": "255",
        "step": 1,
        "className": "",
        "x": 360,
        "y": 320,
        "wires": [
            [
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "c3ca6859219ddc68",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer02/brightness_l2",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 320,
        "wires": [
            [
                "01903a16fd3bcd0b"
            ]
        ]
    },
    {
        "id": "c99bc26a76270e05",
        "type": "ui_button",
        "z": "444f738553fde936",
        "name": "1 Up",
        "group": "c3860422bbb7d03c",
        "order": 1,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-arrow-up fa-2x",
        "payload": "OPEN",
        "payloadType": "str",
        "topic": "z2m/Curtain01/set/state",
        "topicType": "str",
        "x": 330,
        "y": 365,
        "wires": [
            [
                "744148db3da00966"
            ]
        ]
    },
    {
        "id": "036cb45088972d4b",
        "type": "ui_button",
        "z": "444f738553fde936",
        "name": "1 Down",
        "group": "c3860422bbb7d03c",
        "order": 3,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-arrow-down fa-2x",
        "payload": "CLOSE",
        "payloadType": "str",
        "topic": "z2m/Curtain01/set/state",
        "topicType": "str",
        "x": 340,
        "y": 425,
        "wires": [
            [
                "744148db3da00966"
            ]
        ]
    },
    {
        "id": "ae0af56e7cfe2b92",
        "type": "ui_button",
        "z": "444f738553fde936",
        "name": "1 Stop",
        "group": "c3860422bbb7d03c",
        "order": 2,
        "width": "1",
        "height": "1",
        "passthru": false,
        "label": "",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-stop-circle fa-2x",
        "payload": "STOP",
        "payloadType": "str",
        "topic": "z2m/Curtain01/set/state",
        "topicType": "str",
        "x": 330,
        "y": 395,
        "wires": [
            [
                "744148db3da00966"
            ]
        ]
    },
    {
        "id": "744148db3da00966",
        "type": "mqtt out",
        "z": "444f738553fde936",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 550,
        "y": 395,
        "wires": []
    },
    {
        "id": "7662c9135449e5a8",
        "type": "ui_template",
        "z": "444f738553fde936",
        "group": "d66224eb2e38880f",
        "name": "Button",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<img src={{msg.payload}} style=\"width:40px;height:40px;\" alt=\"\" ng-click=\"send({topic: msg.topic, payload: 'TOGGLE'})\">\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 460,
        "y": 150,
        "wires": [
            [
                "eeb4b0cf4868bc7d",
                "6b5e1b070046a2a8"
            ]
        ]
    },
    {
        "id": "eeb4b0cf4868bc7d",
        "type": "function",
        "z": "444f738553fde936",
        "name": "lamp",
        "func": "lib = global.get('LIB') // подключаем функции\nname = lib.Clear(msg.topic);\nstate = global.get(name+\"_state\",\"file\");\n\nif (msg.payload == \"TOGGLE\") { if (state == \"ON\") { msg.payload = \"OFF\"} else { msg.payload = \"ON\"}}\nif (msg.payload == \"STATUS\") { if (state == \"ON\") { msg.payload = \"ON\"} else { msg.payload = \"OFF\"}}\n\nglobal.set(name+\"_state\", msg.payload, \"file\");\nmsg.image=\"/img/lamp/lamp2_\"+msg.payload+\".png\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 150,
        "wires": [
            [
                "7662c9135449e5a8"
            ]
        ]
    },
    {
        "id": "2b13e1749b9015ac",
        "type": "inject",
        "z": "444f738553fde936",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "Dimmer02_l2",
        "payload": "STATUS",
        "payloadType": "str",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "eeb4b0cf4868bc7d"
            ]
        ]
    },
    {
        "id": "03ba3c06825ad9b4",
        "type": "mqtt in",
        "z": "444f738553fde936",
        "name": "",
        "topic": "z2m/Dimmer02/state_l2",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 120,
        "y": 150,
        "wires": [
            [
                "eeb4b0cf4868bc7d"
            ]
        ]
    },
    {
        "id": "2ec0d88aa04f1546",
        "type": "inject",
        "z": "42d314d19c437ae8",
        "name": "OnNewMinute",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "1",
        "payload": "OnNewMinute",
        "payloadType": "str",
        "x": 120,
        "y": 30,
        "wires": [
            [
                "aa3de09442c82e55",
                "c7bd3f5ceeeafba9",
                "e0d855c7d63b9948",
                "eef5032ea5add7f5"
            ]
        ]
    },
    {
        "id": "aa3de09442c82e55",
        "type": "function",
        "z": "42d314d19c437ae8",
        "name": "Button",
        "func": "name = node.name // имя группы устройств)\ncb = global.get(\"setup_\"+name, \"file\"); // количество \nlib = global.get('LIB'); // подключаем функции\nlet bat_cl = []; let sym = []; let col = []; let nmsg = [];\n\nfor (let i = 1; i < cb+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;}\n    nam_cl = name+l+\"_battery\"\n    foo = global.get(nam_cl, \"file\");\n    battary = lib.Battery(foo)\n    \nvar today = new Date();\nvar today2 = global.get(nam_cl+\"_date\", \"file\");\nvar today3 = today-today2; \nrez = Math.round (today3 / 1000 / 60 / 60 / 24);\nswitch (true) { \n        case  rez < 2:\n            col2 = \"green\";\n            break;    \n        case rez >= 2 && rez < 4:\n            col2 = \"yellow\";\n            break;\n        case rez >= 4 && rez < 7:\n            col2 = \"orange\";\n            break;\n        case rez >= 7:\n            col2 = \"red\";\n            break;\n        default:\n            col2 = \"gray\";\n            break;\n    }\n    bat_cl2 = global.get(nam_cl+\"date\", \"file\");\n    if (foo) {proc=foo;} else {proc = \"???\";}\n    if (bat_cl2) {dat=bat_cl2;} else {dat = \"???\";}\nstroka ='<table border=\"0\"><tr> <td>'+'<font size=\"1\" color = \"'+col2+'\">'+dat+'</font>'+'</td>'+'<td rowspan=2>'+battary+'</td> </tr> <tr> <td>'+'<font size=\"1\" color = \"black\">'+proc+'%</font>'+'</td>  </tr></table>'\nnmsg[i] = {payload: stroka};\n}\n\nreturn [nmsg[1],nmsg[2],nmsg[3],nmsg[4],nmsg[5],nmsg[6],nmsg[7],nmsg[8],nmsg[9],nmsg[10],nmsg[11],nmsg[12],nmsg[13],nmsg[14],nmsg[15]];",
        "outputs": 5,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 95,
        "wires": [
            [
                "4a1078e69c468b50"
            ],
            [
                "f43e7fcd78c1ce94"
            ],
            [
                "f6518a9f90acd8ea"
            ],
            [
                "9d26f42968265405"
            ],
            [
                "5cafac271002f576"
            ]
        ]
    },
    {
        "id": "4a1078e69c468b50",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "01 🔳 Douche",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 650,
        "y": 40,
        "wires": []
    },
    {
        "id": "c7bd3f5ceeeafba9",
        "type": "function",
        "z": "42d314d19c437ae8",
        "name": "Sensor",
        "func": "name = node.name // имя группы устройств)\ncb = global.get(\"setup_\"+name, \"file\"); // количество \nlib = global.get('LIB'); // подключаем функции\nlet bat_cl = []; let sym = []; let col = []; let nmsg = [];\n\nfor (let i = 1; i < cb+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;}\n    nam_cl = name+l+\"_battery\"\n    foo = global.get(nam_cl, \"file\");\n    battary = lib.Battery(foo)\n    \nvar today = new Date();\nvar today2 = global.get(nam_cl+\"_date\", \"file\");\nvar today3 = today-today2; \nrez = Math.round (today3 / 1000 / 60 / 60 / 24);\nswitch (true) { \n        case  rez < 2:\n            col2 = \"green\";\n            break;    \n        case rez >= 2 && rez < 4:\n            col2 = \"yellow\";\n            break;\n        case rez >= 4 && rez < 7:\n            col2 = \"orange\";\n            break;\n        case rez >= 7:\n            col2 = \"red\";\n            break;\n        default:\n            col2 = \"gray\";\n            break;\n    }\n    bat_cl2 = global.get(nam_cl+\"date\", \"file\");\n    if (foo) {proc=foo;} else {proc = \"???\";}\n    if (bat_cl2) {dat=bat_cl2;} else {dat = \"???\";}\nstroka ='<table border=\"0\"><tr> <td>'+'<font size=\"1\" color = \"'+col2+'\">'+dat+'</font>'+'</td>'+'<td rowspan=2>'+battary+'</td> </tr> <tr> <td>'+'<font size=\"1\" color = \"black\">'+proc+'%</font>'+'</td>  </tr></table>'\nnmsg[i] = {payload: stroka};\n}\n\nreturn [nmsg[1],nmsg[2],nmsg[3],nmsg[4],nmsg[5],nmsg[6],nmsg[7],nmsg[8],nmsg[9],nmsg[10],nmsg[11],nmsg[12],nmsg[13],nmsg[14],nmsg[15]];",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 235,
        "wires": [
            [
                "686df5496413f60b"
            ],
            [],
            []
        ]
    },
    {
        "id": "686df5496413f60b",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "01🌡️Douche",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 635,
        "y": 280,
        "wires": []
    },
    {
        "id": "f43e7fcd78c1ce94",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "02 🔳 Cusine",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 640,
        "y": 70,
        "wires": []
    },
    {
        "id": "f6518a9f90acd8ea",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "03 🔳 ???",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 100,
        "wires": []
    },
    {
        "id": "9d26f42968265405",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "04 🔳 ???",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 130,
        "wires": []
    },
    {
        "id": "5cafac271002f576",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "05 🔳 ???",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 160,
        "wires": []
    },
    {
        "id": "e0d855c7d63b9948",
        "type": "function",
        "z": "42d314d19c437ae8",
        "name": "Sensor",
        "func": "cb = 1; // количество термостатов\nlet bat_cl = []; let pl = []; let bat_clt = []; let nmsg = [];\n// реле управляемые клапанами отопления или теплым полом\n// номер массива = номер сенсора\n// (NO нормально открытый, NC - нормально закрытый/ теплый пол)\nbat_cl[1] = global.get(\"Relay01_state_l1\"); bat_clt[1] = \"NO\";\n\n\n\n\n\nfor (let i = 1; i < cb+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;}\n    nam_cl = Math.round(global.get(\"Sensor\"+l+\"_temperature\")/2)*2;\n    nam_cl2 = Math.round(global.get(\"Sensor\"+l+\"_humidity\"));\n    nam_cc = global.get(\"Sensor\"+l+\"_setup_temp\", \"file\")\n    if (bat_clt[i]==\"NO\") {\n        if (bat_cl[i]==\"OFF\") {color = \"red\"} else {color = \"blue\"} // для нормально открытых клапанов\n    } else {\n        if (bat_cl[i]==\"OFF\") {color = \"blue\"} else {color = \"red\"} // для нормально открытых клапанов\n    }\n    nmsg[i] = {payload: '<font color=\"'+color+'\">🌡️'+nam_cl+'°C ('+nam_cc+')</font> 💦'+nam_cl2+'%'}\n}\n\nreturn [nmsg[1],nmsg[2],nmsg[3],nmsg[4],nmsg[5],nmsg[6],nmsg[7],nmsg[8],nmsg[9],nmsg[10],nmsg[11],nmsg[12]]\n",
        "outputs": 6,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 555,
        "wires": [
            [
                "afe8c92a448bb7f8",
                "af95e223c067f295"
            ],
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "afe8c92a448bb7f8",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "9f213c40125a5160",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "temp01",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 640,
        "y": 470,
        "wires": []
    },
    {
        "id": "6d85329864a0678b",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 4,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "05 🔳 ???",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 630,
        "y": 190,
        "wires": []
    },
    {
        "id": "eef5032ea5add7f5",
        "type": "function",
        "z": "42d314d19c437ae8",
        "name": "Contact",
        "func": "name = node.name // имя группы устройств)\ncb = global.get(\"setup_\"+name, \"file\"); // количество \nlib = global.get('LIB'); // подключаем функции\nlet bat_cl = []; let sym = []; let col = []; let nmsg = [];\n\nfor (let i = 1; i < cb+1; i++) {\n    if (i<10){l=\"0\"+i;} else {l=\"\"+i;}\n    nam_cl = name+l+\"_battery\"\n    foo = global.get(nam_cl, \"file\");\n    battary = lib.Battery(foo)\n    \nvar today = new Date();\nvar today2 = global.get(nam_cl+\"_date\", \"file\");\nvar today3 = today-today2; \nrez = Math.round (today3 / 1000 / 60 / 60 / 24);\nswitch (true) { \n        case  rez < 2:\n            col2 = \"green\";\n            break;    \n        case rez >= 2 && rez < 4:\n            col2 = \"yellow\";\n            break;\n        case rez >= 4 && rez < 7:\n            col2 = \"orange\";\n            break;\n        case rez >= 7:\n            col2 = \"red\";\n            break;\n        default:\n            col2 = \"gray\";\n            break;\n    }\n    bat_cl2 = global.get(nam_cl+\"date\", \"file\");\n    if (foo) {proc=foo;} else {proc = \"???\";}\n    if (bat_cl2) {dat=bat_cl2;} else {dat = \"???\";}\nstroka ='<table border=\"0\"><tr> <td>'+'<font size=\"1\" color = \"'+col2+'\">'+dat+'</font>'+'</td>'+'<td rowspan=2>'+battary+'</td> </tr> <tr> <td>'+'<font size=\"1\" color = \"black\">'+proc+'%</font>'+'</td>  </tr></table>'\nnmsg[i] = {payload: stroka};\n}\n\nreturn [nmsg[1],nmsg[2],nmsg[3],nmsg[4],nmsg[5],nmsg[6],nmsg[7],nmsg[8],nmsg[9],nmsg[10],nmsg[11],nmsg[12],nmsg[13],nmsg[14],nmsg[15]];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 375,
        "y": 360,
        "wires": [
            [
                "3b3acbcb5601c0fb"
            ],
            []
        ]
    },
    {
        "id": "3b3acbcb5601c0fb",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "4289f43d63cf25ed",
        "order": 15,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "01🌡️Douche",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 620,
        "y": 340,
        "wires": []
    },
    {
        "id": "af95e223c067f295",
        "type": "ui_text",
        "z": "42d314d19c437ae8",
        "group": "9f213c40125a5160",
        "order": 1,
        "width": "5",
        "height": "1",
        "name": "temp01",
        "label": "",
        "format": "{{msg.payload}}",
        "layout": "row-left",
        "className": "",
        "x": 640,
        "y": 505,
        "wires": []
    },
    {
        "id": "f4949b185a017e9c",
        "type": "mqtt out",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 935,
        "y": 295,
        "wires": []
    },
    {
        "id": "230442d6f9802d4a",
        "type": "ui_switch",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Fan auto",
        "tooltip": "",
        "group": "1e93855ef249264e",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "z2m/setup/Sensor01/fan_auto",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 445,
        "y": 410,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "2dc0559e897d009c",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "💧(%)",
        "tooltip": "",
        "group": "1e93855ef249264e",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor01/fan_hum",
        "topicType": "str",
        "min": "50",
        "max": "90",
        "step": 1,
        "className": "",
        "x": 435,
        "y": 440,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "8a434a193a07947d",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor01/fan_auto",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 410,
        "wires": [
            [
                "230442d6f9802d4a"
            ]
        ]
    },
    {
        "id": "b633c7d035c91eef",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor01/fan_hum",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 440,
        "wires": [
            [
                "2dc0559e897d009c"
            ]
        ]
    },
    {
        "id": "f397698e88b7e465",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Душевая🌡️°C",
        "tooltip": "",
        "group": "19178fb22b463673",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor01/temp",
        "topicType": "str",
        "min": "5",
        "max": "35",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 480,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "713c7585943ab737",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor01/temp",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 480,
        "wires": [
            [
                "f397698e88b7e465"
            ]
        ]
    },
    {
        "id": "0773668b3b47e7a9",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor02/temp",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 510,
        "wires": [
            [
                "15132f96ebe85ede"
            ]
        ]
    },
    {
        "id": "15132f96ebe85ede",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Комната 1🌡️°C",
        "tooltip": "",
        "group": "19178fb22b463673",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor02/temp",
        "topicType": "str",
        "min": "5",
        "max": "35",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 510,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "468b065066517833",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor03/temp",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 540,
        "wires": [
            [
                "b046e6cf384ec299"
            ]
        ]
    },
    {
        "id": "b046e6cf384ec299",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Гостинная🌡️°C",
        "tooltip": "",
        "group": "19178fb22b463673",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor03/temp",
        "topicType": "str",
        "min": "5",
        "max": "35",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 540,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "712efc3f17c89cac",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor04/temp",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 570,
        "wires": [
            [
                "2881446f23d36736"
            ]
        ]
    },
    {
        "id": "2881446f23d36736",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Комната 2🌡️°C",
        "tooltip": "",
        "group": "19178fb22b463673",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor04/temp",
        "topicType": "str",
        "min": "5",
        "max": "35",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 570,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "9836e61a9d9bf965",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Sensor05/temp",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 600,
        "wires": [
            [
                "ad41788f19a83f6a"
            ]
        ]
    },
    {
        "id": "ad41788f19a83f6a",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Комната 3🌡️°C",
        "tooltip": "",
        "group": "19178fb22b463673",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Sensor05/temp",
        "topicType": "str",
        "min": "5",
        "max": "35",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 600,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "4b580c2ee7453348",
        "type": "ui_switch",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "auto on",
        "tooltip": "",
        "group": "5f1964dfcf4fae41",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "z2m/setup/Contact01/auto",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 445,
        "y": 270,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "459c9e72a2256e3d",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "éteindre (sec)",
        "tooltip": "",
        "group": "5f1964dfcf4fae41",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Contact01/sec",
        "topicType": "str",
        "min": "60",
        "max": "240",
        "step": "10",
        "className": "",
        "x": 465,
        "y": 300,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "0bf6819916900277",
        "type": "ui_switch",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "автоматически вкл.",
        "tooltip": "",
        "group": "24f5ca9dc0e4bc7b",
        "order": 4,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "z2m/setup/Motion01/auto",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 485,
        "y": 340,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "be62ac7416f11e99",
        "type": "ui_slider",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "выкл. через (сек.)",
        "tooltip": "",
        "group": "24f5ca9dc0e4bc7b",
        "order": 0,
        "width": "6",
        "height": "1",
        "passthru": false,
        "outs": "end",
        "topic": "z2m/setup/Motion01/sec",
        "topicType": "str",
        "min": "0",
        "max": "240",
        "step": "10",
        "className": "",
        "x": 475,
        "y": 370,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "aa24ac9496d1ba63",
        "type": "ui_switch",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Ночной режим",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "z2m/setup/night_mode",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 465,
        "y": 30,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "987bd2650a6fa1e9",
        "type": "ui_numeric",
        "z": "28be11aa5dda6f24",
        "name": "включение час.",
        "label": "Включение",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 2,
        "width": "4",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "z2m/setup/night_mode_on_h",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "23",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 90,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "d26d708f88cc23de",
        "type": "ui_numeric",
        "z": "28be11aa5dda6f24",
        "name": "включение мин.",
        "label": "",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 3,
        "width": "2",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "z2m/setup/night_mode_on_m",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "59",
        "step": 1,
        "className": "",
        "x": 465,
        "y": 120,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "4696218f7551fb80",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Contact01/auto",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 270,
        "wires": [
            [
                "4b580c2ee7453348"
            ]
        ]
    },
    {
        "id": "76f820cb9e1e7b34",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Contact01/sec",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 300,
        "wires": [
            [
                "459c9e72a2256e3d"
            ]
        ]
    },
    {
        "id": "1a382a611952cb1a",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Motion01/auto",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 340,
        "wires": [
            [
                "0bf6819916900277"
            ]
        ]
    },
    {
        "id": "03e4f81cc438c02b",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/Motion01/sec",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 370,
        "wires": [
            [
                "be62ac7416f11e99"
            ]
        ]
    },
    {
        "id": "2486caaad66f1552",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 130,
        "y": 30,
        "wires": [
            [
                "aa24ac9496d1ba63"
            ]
        ]
    },
    {
        "id": "074ec5ce921f956f",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode_on_h",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 90,
        "wires": [
            [
                "987bd2650a6fa1e9"
            ]
        ]
    },
    {
        "id": "ab5cd51b3f4710a9",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode_on_m",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "d26d708f88cc23de"
            ]
        ]
    },
    {
        "id": "13c6ccc697fefdda",
        "type": "ui_numeric",
        "z": "28be11aa5dda6f24",
        "name": "выключение час.",
        "label": "Выключение",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 4,
        "width": "4",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "z2m/setup/night_mode_off_h",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "23",
        "step": 1,
        "className": "",
        "x": 475,
        "y": 150,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "deeab42330d8c977",
        "type": "ui_numeric",
        "z": "28be11aa5dda6f24",
        "name": "выключение мин.",
        "label": "",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 5,
        "width": "2",
        "height": "1",
        "wrap": true,
        "passthru": true,
        "topic": "z2m/setup/night_mode_off_m",
        "topicType": "str",
        "format": "{{value}}",
        "min": 0,
        "max": "59",
        "step": 1,
        "className": "",
        "x": 475,
        "y": 180,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "637b23c3e018a013",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode_off_h",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 150,
        "wires": [
            [
                "13c6ccc697fefdda"
            ]
        ]
    },
    {
        "id": "d4b17f55e3c5e69c",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode_off_m",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "deeab42330d8c977"
            ]
        ]
    },
    {
        "id": "696876a4aa70e352",
        "type": "ui_switch",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "Mode nuit auto",
        "tooltip": "",
        "group": "d9f50c9fcd0d9442",
        "order": 1,
        "width": "6",
        "height": "1",
        "passthru": false,
        "decouple": "true",
        "topic": "z2m/setup/night_mode_auto",
        "topicType": "str",
        "style": "",
        "onvalue": "ON",
        "onvalueType": "str",
        "onicon": "",
        "oncolor": "",
        "offvalue": "OFF",
        "offvalueType": "str",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 465,
        "y": 60,
        "wires": [
            [
                "f4949b185a017e9c"
            ]
        ]
    },
    {
        "id": "7567382f4d8be5ff",
        "type": "mqtt in",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "z2m/setup/night_mode_auto",
        "qos": "1",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 150,
        "y": 60,
        "wires": [
            [
                "696876a4aa70e352"
            ]
        ]
    },
    {
        "id": "3640fa4f8361c40a",
        "type": "ui_template",
        "z": "28be11aa5dda6f24",
        "group": "4291671c8c148a47",
        "name": "Setting",
        "order": 0,
        "width": "0",
        "height": "0",
        "format": "<img src={{msg.image}} style=\"width:40px;height:40px;\" alt=\"\" ng-click=\"send({topic: msg.topic, payload: 'TOGGLE'})\">",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 680,
        "wires": [
            [
                "fb1540ffb7819727"
            ]
        ]
    },
    {
        "id": "a1b0658ddd3c4d55",
        "type": "inject",
        "z": "28be11aa5dda6f24",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "z2m/Dimmer01/state",
        "payload": "ON",
        "payloadType": "str",
        "x": 165,
        "y": 680,
        "wires": [
            [
                "fb1540ffb7819727"
            ]
        ]
    },
    {
        "id": "fb1540ffb7819727",
        "type": "function",
        "z": "28be11aa5dda6f24",
        "name": "lamp",
        "func": "lib = global.get('LIB') // подключаем функции\nname = lib.Clear(msg.topic);\nstate = global.get(name+\"_state\",\"file\");\n\nif (msg.payload == \"TOGGLE\") { if (state == \"ON\") { msg.payload = \"OFF\"} else { msg.payload = \"ON\"}}\nif (msg.payload == \"STATUS\") { if (state == \"ON\") { msg.payload = \"ON\"} else { msg.payload = \"OFF\"}}\n\nglobal.set(name+\"_state\", msg.payload, \"file\");\nmsg.image=\"/img/lamp/lamp2_\"+msg.payload+\".png\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 465,
        "y": 680,
        "wires": [
            [
                "3640fa4f8361c40a"
            ]
        ]
    },
    {
        "id": "1f1e87bf61e307e6",
        "type": "inject",
        "z": "28be11aa5dda6f24",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "z2m/Dimmer01/state",
        "payload": "OFF",
        "payloadType": "str",
        "x": 165,
        "y": 710,
        "wires": [
            [
                "fb1540ffb7819727"
            ]
        ]
    },
    {
        "id": "387527daaffdfa91",
        "type": "mqtt out",
        "z": "28be11aa5dda6f24",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 895,
        "y": 25,
        "wires": []
    },
    {
        "id": "2c54ece721269896",
        "type": "ui_button",
        "z": "28be11aa5dda6f24",
        "name": "",
        "group": "e1a180a18950c296",
        "order": 5,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "JOIN",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "{\"value\": true, \"time\": 600}",
        "payloadType": "str",
        "topic": "z2m/bridge/request/permit_join",
        "topicType": "str",
        "x": 765,
        "y": 25,
        "wires": [
            [
                "387527daaffdfa91"
            ]
        ]
    },
    {
        "id": "b062d4d37dfc1aca",
        "type": "ui_numeric",
        "z": "28be11aa5dda6f24",
        "name": "",
        "label": "numeric",
        "tooltip": "",
        "group": "251ed399a086688a",
        "order": 0,
        "width": 0,
        "height": 0,
        "wrap": false,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "format": "{{value}}",
        "min": 0,
        "max": "50",
        "step": 1,
        "className": "",
        "x": 455,
        "y": 225,
        "wires": [
            []
        ]
    },
    {
        "id": "b0ceca48650547cc",
        "type": "mqtt in",
        "z": "753dd38e63bfaf0a",
        "name": "",
        "topic": "lumi/btn0/action",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 110,
        "wires": [
            [
                "3c4d41ea3ff3d0c5",
                "499a355279ed9c09"
            ]
        ]
    },
    {
        "id": "499a355279ed9c09",
        "type": "function",
        "z": "753dd38e63bfaf0a",
        "name": "",
        "func": "bt = msg.payload; topic = msg.topic;\nkey = msg.payload;\nstate = global.get(\"led_state_t\");\nnmsg={};\nnmsg.topic = \"lumi/light/set\"\n\nif (key == \"single\") {\nnmsg.payload = '{\"state\": \"'+state+'\", \"brightness\": 255, \"color\": {\"r\": 255, \"g\": 255, \"b\": 255}}'; \nnode.send(nmsg);   \n}\nif (key ==\"double\") {\nnmsg.payload = '{\"state\": \"'+state+'\", \"brightness\": 255, \"color\": {\"r\": 255, \"g\": 0, \"b\": 0}}'; \nnode.send(nmsg);   \n}\nif (key == \"quadruple\") {\nnmsg.payload = '{\"state\": \"'+state+'\", \"brightness\": 255, \"color\": {\"r\": 0, \"g\": 0, \"b\": 255}}'; \nnode.send(nmsg);   \n}\nif (key == \"hold\") {\nnmsg.payload = '{\"state\": \"'+state+'\", \"brightness\": 255, \"color\": {\"r\": 50, \"g\": 0, \"b\": 50}}'; \nnode.send(nmsg);   \n}\n\n\n\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 110,
        "wires": [
            [
                "5689bbe9634e0c53"
            ]
        ]
    },
    {
        "id": "3c4d41ea3ff3d0c5",
        "type": "function",
        "z": "753dd38e63bfaf0a",
        "name": "permit_join",
        "func": "bt = msg.payload; topic = msg.topic;\nkey = msg.payload;\nnmsg={};\npermit_join = 600; // количество секунд для подключения\n\nif (key == \"triple\") {\nnmsg.payload = '{\"value\": true, \"time\": '+permit_join+'}'; \nnmsg.topic = \"z2m/bridge/request/permit_join\";\nnmsg.reset;\nnode.send(nmsg);\n\nnmsg.payload = '{\"state\": \"ON\", \"brightness\": 255, \"color\": {\"r\": 50, \"g\": 0, \"b\": 50}}'; \nnmsg.topic = \"lumi/light/set\"\nnmsg.delay = parseInt(permit_join)*1000;\nnode.send(nmsg);  \n}\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 140,
        "wires": [
            [
                "c98e5f21bf6172ea",
                "5689bbe9634e0c53"
            ]
        ]
    },
    {
        "id": "c98e5f21bf6172ea",
        "type": "trigger",
        "z": "753dd38e63bfaf0a",
        "name": "delay",
        "op1": "",
        "op2": "{\"state\": \"OFF\"}",
        "op1type": "nul",
        "op2type": "str",
        "duration": "250",
        "extend": true,
        "overrideDelay": true,
        "units": "ms",
        "reset": "toggle",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 630,
        "y": 140,
        "wires": [
            [
                "5689bbe9634e0c53"
            ]
        ]
    },
    {
        "id": "5689bbe9634e0c53",
        "type": "mqtt out",
        "z": "753dd38e63bfaf0a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "9b93b44814325e7b",
        "x": 840,
        "y": 70,
        "wires": []
    },
    {
        "id": "36ca12cc671f3463",
        "type": "mqtt in",
        "z": "753dd38e63bfaf0a",
        "name": "",
        "topic": "lumi/light",
        "qos": "2",
        "datatype": "auto",
        "broker": "9b93b44814325e7b",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 90,
        "y": 50,
        "wires": [
            [
                "21b3f07b53cf060f"
            ]
        ]
    },
    {
        "id": "21b3f07b53cf060f",
        "type": "function",
        "z": "753dd38e63bfaf0a",
        "name": "led state",
        "func": "bt = JSON.parse(msg.payload);\nkey = bt.state;\nif (key == \"ON\") {key2 = \"OFF\";} else {key2 = \"ON\";}\nglobal.set(\"led_state\", key); // состояние\nglobal.set(\"led_state_t\", key2); // для переключения (противоположное состоянию)\nreturn;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 50,
        "wires": [
            []
        ]
    },
    {
        "id": "e2245272b45b523c",
        "type": "inject",
        "z": "753dd38e63bfaf0a",
        "name": "TOGGLE",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "lumi/light/set",
        "payload": "'{\"state\": \"'&\t$globalContext(\"led_state_t\")\t&'\"}'\t",
        "payloadType": "jsonata",
        "x": 500,
        "y": 50,
        "wires": [
            [
                "5689bbe9634e0c53"
            ]
        ]
    }
]
